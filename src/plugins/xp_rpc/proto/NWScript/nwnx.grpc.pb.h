// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NWScript/nwnx.proto
#ifndef GRPC_NWScript_2fnwnx_2eproto__INCLUDED
#define GRPC_NWScript_2fnwnx_2eproto__INCLUDED

#include "NWScript/nwnx.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace NWNX4 {
namespace HookHorror {
namespace Proto {
namespace NWScript {

class NWNXService final {
 public:
  static constexpr char const* service_full_name() {
    return "NWNX4.HookHorror.Proto.NWScript.NWNXService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Int* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>> AsyncNWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>>(AsyncNWNXGetIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>> PrepareAsyncNWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>>(PrepareAsyncNWNXGetIntRaw(context, request, cq));
    }
    virtual ::grpc::Status NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetIntRaw(context, request, cq));
    }
    virtual ::grpc::Status NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Float* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>> AsyncNWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>>(AsyncNWNXGetFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>> PrepareAsyncNWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>>(PrepareAsyncNWNXGetFloatRaw(context, request, cq));
    }
    virtual ::grpc::Status NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetFloatRaw(context, request, cq));
    }
    virtual ::grpc::Status NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::NWNX4::HookHorror::Proto::NWScript::String* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>> AsyncNWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>>(AsyncNWNXGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>> PrepareAsyncNWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>>(PrepareAsyncNWNXGetStringRaw(context, request, cq));
    }
    virtual ::grpc::Status NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetStringRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>* AsyncNWNXGetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Int>* PrepareAsyncNWNXGetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>* AsyncNWNXGetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Float>* PrepareAsyncNWNXGetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>* AsyncNWNXGetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::String>* PrepareAsyncNWNXGetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Int* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>> AsyncNWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>>(AsyncNWNXGetIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>> PrepareAsyncNWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>>(PrepareAsyncNWNXGetIntRaw(context, request, cq));
    }
    ::grpc::Status NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetIntRaw(context, request, cq));
    }
    ::grpc::Status NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Float* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>> AsyncNWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>>(AsyncNWNXGetFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>> PrepareAsyncNWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>>(PrepareAsyncNWNXGetFloatRaw(context, request, cq));
    }
    ::grpc::Status NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetFloatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetFloatRaw(context, request, cq));
    }
    ::grpc::Status NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::NWNX4::HookHorror::Proto::NWScript::String* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>> AsyncNWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>>(AsyncNWNXGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>> PrepareAsyncNWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>>(PrepareAsyncNWNXGetStringRaw(context, request, cq));
    }
    ::grpc::Status NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> AsyncNWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(AsyncNWNXSetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>> PrepareAsyncNWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>>(PrepareAsyncNWNXSetStringRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXGetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXSetInt(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXGetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXSetFloat(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXGetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NWNXSetString(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>* AsyncNWNXGetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Int>* PrepareAsyncNWNXGetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetIntRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>* AsyncNWNXGetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Float>* PrepareAsyncNWNXGetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetFloatRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>* AsyncNWNXGetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::String>* PrepareAsyncNWNXGetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* AsyncNWNXSetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NWNX4::HookHorror::Proto::NWScript::Void>* PrepareAsyncNWNXSetStringRaw(::grpc::ClientContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXGetInt_;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXSetInt_;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXGetFloat_;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXSetFloat_;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXGetString_;
    const ::grpc::internal::RpcMethod rpcmethod_NWNXSetString_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NWNXGetInt(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response);
    virtual ::grpc::Status NWNXSetInt(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response);
    virtual ::grpc::Status NWNXGetFloat(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response);
    virtual ::grpc::Status NWNXSetFloat(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response);
    virtual ::grpc::Status NWNXGetString(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response);
    virtual ::grpc::Status NWNXSetString(::grpc::ServerContext* context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXGetInt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetInt(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::Int>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXSetInt() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetInt(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXGetFloat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetFloat(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::Float>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXSetFloat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetFloat(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXGetString() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetString(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::String>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NWNXSetString() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetString(::grpc::ServerContext* context, ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::NWNX4::HookHorror::Proto::NWScript::Void>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NWNXGetInt<WithAsyncMethod_NWNXSetInt<WithAsyncMethod_NWNXGetFloat<WithAsyncMethod_NWNXSetFloat<WithAsyncMethod_NWNXGetString<WithAsyncMethod_NWNXSetString<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXGetInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Int>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Int* response) { return this->NWNXGetInt(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXGetInt(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Int>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Int>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetInt(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXSetInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) { return this->NWNXSetInt(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXSetInt(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetInt(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXGetFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Float>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Float* response) { return this->NWNXGetFloat(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXGetFloat(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Float>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Float>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXSetFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) { return this->NWNXSetFloat(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXSetFloat(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXGetString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::String>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::String* response) { return this->NWNXGetString(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXGetString(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::String>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::String>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetString(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NWNXSetString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* request, ::NWNX4::HookHorror::Proto::NWScript::Void* response) { return this->NWNXSetString(context, request, response); }));}
    void SetMessageAllocatorFor_NWNXSetString(
        ::grpc::experimental::MessageAllocator< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetString(
      ::grpc::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_NWNXGetInt<ExperimentalWithCallbackMethod_NWNXSetInt<ExperimentalWithCallbackMethod_NWNXGetFloat<ExperimentalWithCallbackMethod_NWNXSetFloat<ExperimentalWithCallbackMethod_NWNXGetString<ExperimentalWithCallbackMethod_NWNXSetString<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_NWNXGetInt<ExperimentalWithCallbackMethod_NWNXSetInt<ExperimentalWithCallbackMethod_NWNXGetFloat<ExperimentalWithCallbackMethod_NWNXSetFloat<ExperimentalWithCallbackMethod_NWNXGetString<ExperimentalWithCallbackMethod_NWNXSetString<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXGetInt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXSetInt() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXGetFloat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXSetFloat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXGetString() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NWNXSetString() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXGetInt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetInt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXSetInt() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetInt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXGetFloat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetFloat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXSetFloat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetFloat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXGetString() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXGetString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NWNXSetString() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNWNXSetString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXGetInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXGetInt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetInt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXSetInt() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXSetInt(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetInt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetInt(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXGetFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXGetFloat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXSetFloat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXSetFloat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetFloat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetFloat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXGetString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXGetString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXGetString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXGetString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NWNXSetString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NWNXSetString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NWNXSetString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NWNXSetString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXGetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXGetInt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Int>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Int>* streamer) {
                       return this->StreamedNWNXGetInt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXGetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXGetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Int* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXGetInt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetIntRequest,::NWNX4::HookHorror::Proto::NWScript::Int>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXSetInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXSetInt() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* streamer) {
                       return this->StreamedNWNXSetInt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXSetInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXSetInt(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXSetInt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetIntRequest,::NWNX4::HookHorror::Proto::NWScript::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXGetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXGetFloat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Float>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Float>* streamer) {
                       return this->StreamedNWNXGetFloat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXGetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXGetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXGetFloat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetFloatRequest,::NWNX4::HookHorror::Proto::NWScript::Float>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXSetFloat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXSetFloat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* streamer) {
                       return this->StreamedNWNXSetFloat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXSetFloat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXSetFloat(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXSetFloat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetFloatRequest,::NWNX4::HookHorror::Proto::NWScript::Void>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXGetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXGetString() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::String>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::String>* streamer) {
                       return this->StreamedNWNXGetString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXGetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXGetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXGetString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXGetStringRequest,::NWNX4::HookHorror::Proto::NWScript::String>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NWNXSetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NWNXSetString() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest, ::NWNX4::HookHorror::Proto::NWScript::Void>* streamer) {
                       return this->StreamedNWNXSetString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NWNXSetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NWNXSetString(::grpc::ServerContext* /*context*/, const ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest* /*request*/, ::NWNX4::HookHorror::Proto::NWScript::Void* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNWNXSetString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NWNX4::HookHorror::Proto::NWScript::NWNXSetStringRequest,::NWNX4::HookHorror::Proto::NWScript::Void>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NWNXGetInt<WithStreamedUnaryMethod_NWNXSetInt<WithStreamedUnaryMethod_NWNXGetFloat<WithStreamedUnaryMethod_NWNXSetFloat<WithStreamedUnaryMethod_NWNXGetString<WithStreamedUnaryMethod_NWNXSetString<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NWNXGetInt<WithStreamedUnaryMethod_NWNXSetInt<WithStreamedUnaryMethod_NWNXGetFloat<WithStreamedUnaryMethod_NWNXSetFloat<WithStreamedUnaryMethod_NWNXGetString<WithStreamedUnaryMethod_NWNXSetString<Service > > > > > > StreamedService;
};

}  // namespace NWScript
}  // namespace Proto
}  // namespace HookHorror
}  // namespace NWNX4


#endif  // GRPC_NWScript_2fnwnx_2eproto__INCLUDED
