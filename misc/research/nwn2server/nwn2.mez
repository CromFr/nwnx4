typedef int size_t;
typedef int ULONG;

struct NwnString
{
	// Not really 256 char limitation, but just for display sizing purposes in MemAnalyzer
	string[256] *buf; // can be NULL for empty string
	size_t len; // includes terminating '\0', can be 0 bytes for empty string
};

enum OBJECT_ID
{
	INVALIDOBJID = 0x7F000000
};

enum OBJECT_ID_VALUES
{
	MINCHAROBJID = 0x7F000001,
	MAXCHAROBJID = 0x7FFFFFFF,
	MINOBJECTID = 0x00000000,
	MAXOBJECTID = 0x7EFFFFFF,
	CHAROBJECT_MASK = 0x7F000000,
	LISTTYPE_MASK = 0x80000000,
	LISTINDEX_MASK = 0x7FFF0000,
	ARRAYINDEX_MASK = 0x0FFF,
	ARRAYINDEX_SHIFT = 0x0C
};

enum PLAYER_ID
{
	PLAYERID_ALL_CLIENTS = 0xFFFFFFFF,
	PLAYERID_INVALIDID = 0xFFFFFFFE,
	PLAYERID_SERVER = 0xFFFFFFD,
	PLAYERID_ALL_PLAYERS = 0xFFFFFFF7,
	PLAYERID_ALL_GAMEMASTERS = 0xFFFFFFF6,
	PLAYERID_ALL_SERVERADMINS = 0xFFFFFFF5
};

char enum OBJECT_TYPE
{
	OBJECT_TYPE_GUI = 0x01,
	OBJECT_TYPE_TILE = 0x02,
	OBJECT_TYPE_MODULE = 0x03,
	OBJECT_TYPE_AREA = 0x04,
	OBJECT_TYPE_CREATURE = 0x05,
	OBJECT_TYPE_ITEM = 0x06,
	OBJECT_TYPE_TRIGGER = 0x07,
	OBJECT_TYPE_PROJECTILE = 0x08,
	OBJECT_TYPE_PLACEABLE = 0x09,
	OBJECT_TYPE_DOOR = 0x0A,
	OBJECT_TYPE_AREAOFEFFECTOBJECT = 0x0B,
	OBJECT_TYPE_WAYPOINT = 0x0C,
	OBJECT_TYPE_ENCOUNTER = 0x0D,
	OBJECT_TYPE_STORE = 0x0E,
	OBJECT_TYPE_PORTAL = 0x0F,
	OBJECT_TYPE_SOUND = 0x10
};

char enum DAMAGE_TYPE
{
	DAMAGE_TYPE_ALL         = 0x00,
	DAMAGE_TYPE_BLUDGEONING = 0x01,
	DAMAGE_TYPE_PIERCING    = 0x02,
	DAMAGE_TYPE_SLASHING    = 0x03,
	DAMAGE_TYPE_MAGICAL     = 0x04,
	DAMAGE_TYPE_ACID        = 0x05,
	DAMAGE_TYPE_COLD        = 0x06,
	DAMAGE_TYPE_DIVINE      = 0x07,
	DAMAGE_TYPE_ELECTRICAL  = 0x08,
	DAMAGE_TYPE_FIRE        = 0x09,
	DAMAGE_TYPE_NEGATIVE    = 0x0A,
	DAMAGE_TYPE_POSITIVE    = 0x0B,
	DAMAGE_TYPE_SONIC       = 0x0C
};

struct POSITION
{
	float x;
	float y;
	float z;
};

struct OBJECT_OLD
{
	void *vtable;
//	char unk[0x6c];
	POSITION pos@0x70;
//	char unk2[0x8];
	string[16] *ObjectClass@0x84;
//	char unk2[0xbc];
	OBJECT_ID ObjectId@0x144;
};



struct OBJECT_VTABLE
{
	void *func0;
	void *func1;
	void *func2;
	void *func3;
	void *func4;
	void *func5;
	void *func6;
	void *func7;
	void *SetPosition;
	void *GetSubStruct1;
	void *GetSubStruct2;
	void *DeleteSubStruct1;
	void *SetValueScriptTargetObjectId;
	void *funcd;
	void *funce;
	void *GetRealObject;
	void *func10;
	void *func11;
	void *GetRealObject2;
	void *GetRealObject3;
	void *func14;
	void *func15;
	void *func16;
	void *func17;
};

struct OBJECT_SUBSTRUCT_1
{
	void *vtable;
};



struct OBJECT // CNWSDoor
{
	OBJECT_VTABLE *vtable;
	//char unk[0x6c];
	POSITION pos@0x70;
	float facing@0x7c;
	int immobile@0x80;
	string[16] *name@0x84;
	//char unk2[0x18];
	OBJECT_ID ScriptTargetObjectId@0xa0;
	OBJECT_TYPE ObjectType@0xa4;
	//char unk2_4[0x3];
	int value_a8@0xa8;
	//char unk2_3[0x24];
	OBJECT_SUBSTRUCT_1 *SubStruct1@0xd0;
	NwnString TemplateName@0xd4;
	NwnString InstanceName@0xdc;
	//char unk2_5[0x8];
	string[0x20] Portrait@0xe4;
	short PortraitId@0x104;
	//char unk2_3[0x16];
	char value_11c@0x11c;
	//char unk2_2[0xb];
	OBJECT_ID UnkObjectId7@0x128;
	//char unk2_1[0x14];
	OBJECT_ID UnkObjectId2;//0x140;
	OBJECT_ID ObjectId@0x144;
	//char unk3[0x1c];
	int value_164@0x164;
	int value_168@0x168;
	//int unk3_1;
	int value_170@0x170;
	//char unk3_2[0xc];
	int value_180@0x180;
	//char unk3_9[0x10];
	void *class_p2@0x19c;
	void *class_p@0x1a0;
	//char unk3_3[0x40];
	OBJECT_ID UnkObjectId3@0x1e4;
	OBJECT_ID UnkObjectId4@0x1e8;
	OBJECT_ID UnkObjectId5@0x1ec;
	OBJECT_ID UnkObjectId6@0x1f0;
	//char unk3_1[0x3c];
	OBJECT_ID UnkObjectId8@0x230;
	OBJECT_ID UnkObjectId9@0x234;
	//char unk3_2[0x4];
	OBJECT_ID UnkObjectId10@0x23c;
	//char unk3_3[0x2c];
	char DamageImmunity[ 0xD ]@0x26c;
	//char unk3_8[0x5b];
	int value_2d4@0x2d4;
	//char unk3_4[0xc];
	int value_2e4@0x2e4;
	//char unk3_5[0xc];
	int value_2f4@0x2f4;
	//char unk3_6[0x18];
	string[16] SomeResRef2@0x310;
	//char unk3_7[0x8];
	//
	// These and beyond seem to be specific to the Door (or maybe Placeable) object.
	//

	//
	// N.B. For CNWSCreature, we've got an array of NwnString describing various
	// scripts.
	//

	NwnString DeathScript@0x328;
	//char unk4[0x28];
	NwnString TrapScript@0x358;
	//char unk5[0x2d];
	char data[0x40]@0x38d;
	//char unk5_1[0x23];
	int value_3f0@0x3f0;
	//char unk5_2[0x20];
	int value_414@0x414;
	//char unk5_3[0x68];
	NwnString EnterScript@0x480; // Or Heartbeat script for Creatures
};


struct OBJECT_ENTRY
{
	OBJECT_ID RealObjectId;
	OBJECT *Object;
	OBJECT_ENTRY *OverflowLink;
};

struct OBJECT_ENTRY_ARRAY
{
	OBJECT_ENTRY *Objects[ 0x1000 ];
};

struct OBJECT_MANAGER
{
	void *vtable;
	OBJECT_ENTRY_ARRAY *ObjectArray2;
	OBJECT_ENTRY_ARRAY *ObjectArray;
};

struct SCRIPT_VM
{
	int x;
};

struct NWN_SERVER
{
	void *Something;
	OBJECT_MANAGER *ObjectManager;
};

NWN_SERVER *ServerThis@0x84BFAC;
SCRIPT_VM *ScriptThis@0x84BFA4;


// sizeof 0x4c0, for CNWSDoor
struct TEST_OBJECT2 // CNWSDoor
{
	OBJECT_VTABLE *vtable;
	char unk[0x6c];
	POSITION pos;//@0x70;
	float facing;//@0x7c;
	int immobile;//@0x80;
	string[16] *name;//@0x84;
	char unk2[0x18];
	OBJECT_ID ScriptTargetObjectId;//@0xa0;
	OBJECT_TYPE ObjectType;//@0xa4;
	char unk2_4[0x3];
	int value_a8;//@0xa8;
	char unk2_3[0x24];
	OBJECT_SUBSTRUCT_1 *SubStruct1;//@0xd0;
	NwnString SomeResRef;//@0xd4;
	char unk2_3[0x40];
	char value_11c;//@0x11c;
	char unk2_2[0xb];
	OBJECT_ID UnkObjectId7;//@0x128;
	char unk2_1[0x14];
	OBJECT_ID UnkObjectId2;//0x140;
	OBJECT_ID ObjectId;//@0x144;
	char unk3[0x1c];
	int value_164;//@0x164;
	int value_168;//@0x168;
	int unk3_1;
	int value_170;//@0x170;
	char unk3_2[0xc];
	int value_180;//@0x180;
	char unk3_2[0x1c];
	void *p;//@0x1a0;
	char unk3_3[0x40];
	OBJECT_ID UnkObjectId3;//@0x1e4;
	OBJECT_ID UnkObjectId4;//@0x1e8;
	OBJECT_ID UnkObjectId5;//@0x1ec;
	OBJECT_ID UnkObjectId6;//@0x1f0;
	char unk3_1[0x3c];
	OBJECT_ID UnkObjectId8;//@0x230;
	OBJECT_ID UnkObjectId9;//@0x234;
	char unk3_2[0x4];
	OBJECT_ID UnkObjectId10;//@0x23c;
	char unk3_3[0x94];
	int value_2d4;//@0x2d4;
	char unk3_4[0xc];
	int value_2e4;//@0x2e4;
	char unk3_5[0xc];
	int value_2f4;//@0x2f4;
	char unk3_6[0x18];
	string[16] SomeResRef2;//@0x310;
	char unk3_7[0x8];

	//
	// These and beyond seem to be specific to the Door (or maybe Placable) object.
	//

	NwnString DeathScript;//@0x328;
	char unk4[0x28];
	NwnString TrapScript;//@0x358;
	char unk5[0x2d];
	char data[0x40];//@0x38d
	char unk5_1[0xb3];
	NwnString EnterScript;//@0x480;
};


struct TEST_OBJECT // CNWSDoor
{
	OBJECT_VTABLE *vtable;
	char unk[0x6c];
	POSITION pos;//@0x70;
	float facing;//@0x7c;
	int immobile;//@0x80;
	string[16] *name;//@0x84;
	char unk2[0x18];
	OBJECT_ID ScriptTargetObjectId;//@0xa0;
	OBJECT_TYPE ObjectType;//@0xa4;
	char unk2_4[0x3];
	int value_a8;//@0xa8;
	char unk2_3[0x24];
	OBJECT_SUBSTRUCT_1 *SubStruct1;//@0xd0;
	NwnString TemplateName;//@0xd4;
	NwnString InstanceName;//@0xdc;
	char unk2_5[0x8];
	string[0x20] Portrait;//@0xe4;
	short PortraitId;//@0x104;
	char unk2_3[0x16];
	char value_11c;//@0x11c;
	char unk2_2[0xb];
	OBJECT_ID UnkObjectId7;//@0x128;
	char unk2_1[0x14];
	OBJECT_ID UnkObjectId2;//0x140;
	OBJECT_ID ObjectId;//@0x144;
	char unk3[0x1c];
	int value_164;//@0x164;
	int value_168;//@0x168;
	int unk3_1;
	int value_170;//@0x170;
	char unk3_2[0xc];
	int value_180;//@0x180;
	char unk3_9[0x10];
	void *class_p2;//@0x19c;
	void *class_p;//@0x1a0;
	char unk3_3[0x40];
	OBJECT_ID UnkObjectId3;//@0x1e4;
	OBJECT_ID UnkObjectId4;//@0x1e8;
	OBJECT_ID UnkObjectId5;//@0x1ec;
	OBJECT_ID UnkObjectId6;//@0x1f0;
	char unk3_1[0x3c];
	OBJECT_ID UnkObjectId8;//@0x230;
	OBJECT_ID UnkObjectId9;//@0x234;
	char unk3_2[0x4];
	OBJECT_ID UnkObjectId10;//@0x23c;
	char unk3_3[0x2c];
	char DamageImmunity[ 0xD ];//@0x26c;
	char unk3_8[0x5b];
	int value_2d4;//@0x2d4;
	char unk3_4[0xc];
	int value_2e4;//@0x2e4;
	char unk3_5[0xc];
	int value_2f4;//@0x2f4;
	char unk3_6[0x18];
	string[16] SomeResRef2;//@0x310;
	char unk3_7[0x8];
	//
	// These and beyond seem to be specific to the Door (or maybe Placeable) object.
	//

	NwnString DeathScript;//@0x328;
	char unk4[0x28];
	NwnString TrapScript;//@0x358;
	char unk5[0x2d];
	char data[0x40];//@0x38d;
	char unk5_1[0x23];
	int value_3f0;//@0x3f0;
	char unk5_2[0x20];
	int value_414;//@0x414;
	char unk5_3[0x68];
	NwnString EnterScript;//@0x480; // Or Heartbeat script for Creatures
};


// Test objects for individual inspection, not fixed addresses.
//
/*

TEST_OBJECT o@0x05b7dea8;
TEST_OBJECT o2@0x05b7ec08;
TEST_OBJECT oLast@0x05d94600;

TEST_OBJECT object_18a7@0x114ee9a8;
TEST_OBJECT object_1d65@0x11b9c638;
TEST_OBJECT object_18a0@0x114eb800;
TEST_OBJECT object_0ebb@0x09269098;
TEST_OBJECT object_0eae@0x09263460;

TEST_OBJECT creature_04a4@0x080dbf18;
TEST_OBJECT creature_04a5@0x080e2618; 
TEST_OBJECT creature_04a8@0x080ebdc8;
TEST_OBJECT item_04a9@0x080f2a50;
TEST_OBJECT item_04aa@0x080f4218;
TEST_OBJECT trigger_04ab@0x080f5430;
TEST_OBJECT trigger_04ac@0x080f6380;
TEST_OBJECT area_11a1@0x098b6128;

*/
